-- Создание таблицы пользователей
CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    login VARCHAR(50) NOT NULL,
    name VARCHAR(100),
    birthday DATE NOT NULL,
    CONSTRAINT uq_user_email UNIQUE (email),
    CONSTRAINT uq_user_login UNIQUE (login)
);

-- Создание таблицы возрастных рейтингов MPA
CREATE TABLE IF NOT EXISTS mpa_rating (
    id INTEGER PRIMARY KEY,
    code VARCHAR(10) NOT NULL,
    description VARCHAR(100) NOT NULL,
    CONSTRAINT uq_mpa_code UNIQUE (code)
);

-- Создание таблицы жанров
CREATE TABLE IF NOT EXISTS genre (
    id INTEGER PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT uq_genre_name UNIQUE (name)
);

-- Создание таблицы фильмов
CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(150) NOT NULL,
    description VARCHAR(200),
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    mpa_rating_id INTEGER NOT NULL,
    CONSTRAINT fk_film_mpa FOREIGN KEY (mpa_rating_id) REFERENCES mpa_rating(id),
    CONSTRAINT chk_film_duration CHECK (duration > 0)
);

-- Создание таблицы связи фильмов и жанров
CREATE TABLE IF NOT EXISTS film_genre (
    film_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_fg_film FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    CONSTRAINT fk_fg_genre FOREIGN KEY (genre_id) REFERENCES genre(id)
);

-- Создание таблицы лайков
CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_like_film FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    CONSTRAINT fk_like_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Создание таблицы статусов дружбы
CREATE TABLE IF NOT EXISTS friendship_status (
    id INTEGER PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    description VARCHAR(100) NOT NULL,
    CONSTRAINT uq_status_name UNIQUE (name)
);

-- Создание таблицы дружеских связей
CREATE TABLE IF NOT EXISTS friendship (
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    status_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_friendship_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_friendship_friend FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_friendship_status FOREIGN KEY (status_id) REFERENCES friendship_status(id),
    CONSTRAINT chk_friendship_not_self CHECK (user_id <> friend_id)
);